services:
  install_plugins:
    # This intermediate service is used to install the plugins
    # before starting the GatewayD service.
    image: alpine:3.20
    command: ["/bin/sh", "/setup.sh"]
    volumes:
      - ./setup.sh:/setup.sh:ro
      # Use the variable defined above to mount the GatewayD files.
      - ./gatewayd-files:/gatewayd-files:rw
    environment:
      - GATEWAYD_FILES=/gatewayd-files
      # If you want to install a specific version of GatewayD, you can set the
      # GATEWAYD_VERSION environment variable to the desired version. Otherwise,
      # the latest version will be installed.
      # - GATEWAYD_VERSION=v0.9.5
      # The architecture of the GatewayD and plugins to install.
      # Default: amd64
      # Possible values: amd64 or arm64
      # - ARCH=amd64
      - REDIS_URL=redis://redis:6379/0
  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  gatewayd:
    image: gatewaydio/gatewayd:latest
    command: ["run", "--config", "/gatewayd-files/gatewayd.yaml", "--plugin-config", "/gatewayd-files/gatewayd_plugins.yaml", "--tracing", "--collector-url", "tempo:4317"]
    environment:
      # For more information about the environment variables, see:
      # https://docs.gatewayd.io/using-gatewayd/configuration#environment-variables
      - GATEWAYD_CLIENTS_DEFAULT_ADDRESS=postgres:5432
      # - GATEWAYD_LOGGERS_DEFAULT_LEVEL=debug
    ports:
      # GatewayD server for PostgreSQL clients to connect to
      - "15432:15432"
      # Prometheus metrics:
      #   http://localhost:9090/metrics # Make sure the port is not used by prometheus before uncommenting the following line
      # - "9090:9090"
      # GatewayD HTTP gateway:
      #   http://localhost:18080/swagger-ui/ for the API documentation
      #   http://localhost:18080/healthz for the health check
      - "18080:18080"
      # GatewayD gRPC API with reflection enabled:
      #   You can use grpcurl or grpc-client-cli to interact with it
      - "19090:19090"
    volumes:
      - ./gatewayd-files:/gatewayd-files:ro
    links:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://gatewayd:18080/healthz"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      install_plugins:
        condition: service_completed_successfully

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./observability-configs/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - gatewayd

  tempo_init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo

  tempo:
    image: *tempoImage
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./observability-configs/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - "4317:4317" # otlp grpc
    depends_on:
      - tempo_init

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./observability-configs/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - tempo
