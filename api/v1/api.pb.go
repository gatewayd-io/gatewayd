// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: api/v1/api.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// VersionResponse is the response returned by the Version RPC.
type VersionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version is the version of the GatewayD.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// VersionInfo is the detailed version info of the GatewayD.
	VersionInfo   string `protobuf:"bytes,2,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	mi := &file_api_v1_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{0}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionResponse) GetVersionInfo() string {
	if x != nil {
		return x.VersionInfo
	}
	return ""
}

// PluginID is the identifier that uniquely identifies the plugin.
type PluginID struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the name of the plugin.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version is the version of the plugin.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// RemoteURL is the remote URL of the plugin.
	RemoteUrl string `protobuf:"bytes,3,opt,name=remote_url,json=remoteUrl,proto3" json:"remote_url,omitempty"`
	// Checksum is the checksum of the plugin.
	Checksum      string `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginID) Reset() {
	*x = PluginID{}
	mi := &file_api_v1_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginID) ProtoMessage() {}

func (x *PluginID) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginID.ProtoReflect.Descriptor instead.
func (*PluginID) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{1}
}

func (x *PluginID) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginID) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PluginID) GetRemoteUrl() string {
	if x != nil {
		return x.RemoteUrl
	}
	return ""
}

func (x *PluginID) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

// PluginConfig is the configuration of the plugin.
type PluginConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is the identifier that uniquely identifies the plugin.
	Id *PluginID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Description is the description of the plugin.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Authors is the list of authors of the plugin.
	Authors []string `protobuf:"bytes,3,rep,name=authors,proto3" json:"authors,omitempty"`
	// License is the license of the plugin.
	License string `protobuf:"bytes,4,opt,name=license,proto3" json:"license,omitempty"`
	// ProjectURL is the project URL of the plugin.
	ProjectUrl string `protobuf:"bytes,5,opt,name=project_url,json=projectUrl,proto3" json:"project_url,omitempty"`
	// Config is the internal and external configuration of the plugin.
	Config map[string]string `protobuf:"bytes,6,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Hooks is the list of hooks the plugin attaches to.
	Hooks []int32 `protobuf:"varint,7,rep,packed,name=hooks,proto3" json:"hooks,omitempty"`
	// Requires is the list of plugins the plugin depends on.
	Requires map[string]string `protobuf:"bytes,8,rep,name=requires,proto3" json:"requires,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Tags is the list of tags of the plugin.
	Tags []string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	// Categories is the list of categories of the plugin.
	Categories    []string `protobuf:"bytes,10,rep,name=categories,proto3" json:"categories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginConfig) Reset() {
	*x = PluginConfig{}
	mi := &file_api_v1_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginConfig) ProtoMessage() {}

func (x *PluginConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginConfig.ProtoReflect.Descriptor instead.
func (*PluginConfig) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{2}
}

func (x *PluginConfig) GetId() *PluginID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PluginConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PluginConfig) GetAuthors() []string {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *PluginConfig) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *PluginConfig) GetProjectUrl() string {
	if x != nil {
		return x.ProjectUrl
	}
	return ""
}

func (x *PluginConfig) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *PluginConfig) GetHooks() []int32 {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *PluginConfig) GetRequires() map[string]string {
	if x != nil {
		return x.Requires
	}
	return nil
}

func (x *PluginConfig) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PluginConfig) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

// PluginConfigs is the list of plugin configurations.
type PluginConfigs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configs is the list of plugin configurations.
	Configs       []*PluginConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginConfigs) Reset() {
	*x = PluginConfigs{}
	mi := &file_api_v1_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginConfigs) ProtoMessage() {}

func (x *PluginConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginConfigs.ProtoReflect.Descriptor instead.
func (*PluginConfigs) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{3}
}

func (x *PluginConfigs) GetConfigs() []*PluginConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

// Group is the object group to filter the global config by.
type Group struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GroupName is the name of the group.
	GroupName     *string `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3,oneof" json:"group_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Group) Reset() {
	*x = Group{}
	mi := &file_api_v1_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4}
}

func (x *Group) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

type PeersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map of peer IDs to their information
	Peers         map[string]*PeerInfo `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeersResponse) Reset() {
	*x = PeersResponse{}
	mi := &file_api_v1_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersResponse) ProtoMessage() {}

func (x *PeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersResponse.ProtoReflect.Descriptor instead.
func (*PeersResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{5}
}

func (x *PeersResponse) GetPeers() map[string]*PeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

type PeerInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the peer
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Network address of the peer
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Current state of the peer in the Raft cluster
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Indicates if this peer is the current leader
	IsLeader bool `protobuf:"varint,4,opt,name=is_leader,json=isLeader,proto3" json:"is_leader,omitempty"`
	// Indicates if this peer has voting rights
	IsVoter       bool `protobuf:"varint,5,opt,name=is_voter,json=isVoter,proto3" json:"is_voter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	mi := &file_api_v1_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{6}
}

func (x *PeerInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PeerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PeerInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PeerInfo) GetIsLeader() bool {
	if x != nil {
		return x.IsLeader
	}
	return false
}

func (x *PeerInfo) GetIsVoter() bool {
	if x != nil {
		return x.IsVoter
	}
	return false
}

type AddPeerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the new peer
	PeerId string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// Network address for Raft communication
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// gRPC address for API communication
	GrpcAddress   string `protobuf:"bytes,3,opt,name=grpc_address,json=grpcAddress,proto3" json:"grpc_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPeerRequest) Reset() {
	*x = AddPeerRequest{}
	mi := &file_api_v1_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeerRequest) ProtoMessage() {}

func (x *AddPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeerRequest.ProtoReflect.Descriptor instead.
func (*AddPeerRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{7}
}

func (x *AddPeerRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *AddPeerRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddPeerRequest) GetGrpcAddress() string {
	if x != nil {
		return x.GrpcAddress
	}
	return ""
}

type AddPeerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates if the operation was successful
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if the operation failed
	Error         string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPeerResponse) Reset() {
	*x = AddPeerResponse{}
	mi := &file_api_v1_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPeerResponse) ProtoMessage() {}

func (x *AddPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPeerResponse.ProtoReflect.Descriptor instead.
func (*AddPeerResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{8}
}

func (x *AddPeerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddPeerResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RemovePeerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the peer to remove
	PeerId        string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePeerRequest) Reset() {
	*x = RemovePeerRequest{}
	mi := &file_api_v1_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePeerRequest) ProtoMessage() {}

func (x *RemovePeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePeerRequest.ProtoReflect.Descriptor instead.
func (*RemovePeerRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{9}
}

func (x *RemovePeerRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

type RemovePeerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates if the operation was successful
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if the operation failed
	Error         string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePeerResponse) Reset() {
	*x = RemovePeerResponse{}
	mi := &file_api_v1_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePeerResponse) ProtoMessage() {}

func (x *RemovePeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePeerResponse.ProtoReflect.Descriptor instead.
func (*RemovePeerResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{10}
}

func (x *RemovePeerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemovePeerResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_api_v1_api_proto protoreflect.FileDescriptor

const file_api_v1_api_proto_rawDesc = "" +
	"\n" +
	"\x10api/v1/api.proto\x12\x06api.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"\x99\x02\n" +
	"\x0fVersionResponse\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12!\n" +
	"\fversion_info\x18\x02 \x01(\tR\vversionInfo:\xc8\x01\x92A\xc4\x01\n" +
	"R*\x0fVersionResponse2?VersionResponse is the response returned by the Version method.2n{\"version\":\"0.8.5\",\"version_info\":\"GatewayD v0.8.4 (2023-10-29T10:06:37+0000/a776985, go1.21.0, linux/amd64)\"}\"\xc7\x02\n" +
	"\bPluginID\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x1d\n" +
	"\n" +
	"remote_url\x18\x03 \x01(\tR\tremoteUrl\x12\x1a\n" +
	"\bchecksum\x18\x04 \x01(\tR\bchecksum:\xd1\x01\x92A\xcd\x01\n" +
	"K*\bPluginID2?PluginID is the identifier that uniquely identifies the plugin.2~{\"name\":\"gatewayd-plugin-cache\",\"version\":\"0.0.1\",\"remoteUrl\":\"github.com/gatewayd-io/gatewayd-plugin-cache\",\"checksum\":\"...\"}\"\x92\n" +
	"\n" +
	"\fPluginConfig\x12 \n" +
	"\x02id\x18\x01 \x01(\v2\x10.api.v1.PluginIDR\x02id\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x18\n" +
	"\aauthors\x18\x03 \x03(\tR\aauthors\x12\x18\n" +
	"\alicense\x18\x04 \x01(\tR\alicense\x12\x1f\n" +
	"\vproject_url\x18\x05 \x01(\tR\n" +
	"projectUrl\x128\n" +
	"\x06config\x18\x06 \x03(\v2 .api.v1.PluginConfig.ConfigEntryR\x06config\x12\x14\n" +
	"\x05hooks\x18\a \x03(\x05R\x05hooks\x12>\n" +
	"\brequires\x18\b \x03(\v2\".api.v1.PluginConfig.RequiresEntryR\brequires\x12\x12\n" +
	"\x04tags\x18\t \x03(\tR\x04tags\x12\x1e\n" +
	"\n" +
	"categories\x18\n" +
	" \x03(\tR\n" +
	"categories\x1a9\n" +
	"\vConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rRequiresEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\xac\x06\x92A\xa8\x06\n" +
	"@*\fPluginConfig20PluginConfig is the configuration of the plugin.2\xe3\x05{\"id\":{\"name\":\"gatewayd-plugin-cache\",\"version\":\"0.0.1\",\"remoteUrl\":\"github.com/gatewayd-io/gatewayd-plugin-cache\",\"checksum\":\"...\"},\"description\":\"GatewayD plugin for caching query results\",\"authors\":[\"...\"],\"license\":\"AGPL-3.0\",\"projectUrl\":\"https://github.com/gatewayd-io/gatewayd-plugin-cache\",\"config\":{\"apiAddress\":\"localhost:18080\",\"defaultDBName\":\"\",\"exitOnStartupError\":\"False\",\"expiry\":\"1h\",\"metricsEnabled\":\"True\",\"metricsEndpoint\":\"/metrics\",\"metricsUnixDomainSocket\":\"/tmp/gatewayd-plugin-cache.sock\",\"periodicInvalidatorEnabled\":\"True\",\"periodicInvalidatorInterval\":\"1m\",\"periodicInvalidatorStartDelay\":\"1m\",\"redisURL\":\"redis://localhost:6379/0\",\"scanCount\":\"1000\"},\"hooks\":[14,16,18],\"requires\":{},\"tags\":[],\"categories\":[]}\"\xf0\x06\n" +
	"\rPluginConfigs\x12.\n" +
	"\aconfigs\x18\x01 \x03(\v2\x14.api.v1.PluginConfigR\aconfigs:\xae\x06\x92A\xaa\x06\n" +
	"@*\fPluginConfig20PluginConfig is the configuration of the plugin.2\xe5\x05[{\"id\":{\"name\":\"gatewayd-plugin-cache\",\"version\":\"0.0.1\",\"remoteUrl\":\"github.com/gatewayd-io/gatewayd-plugin-cache\",\"checksum\":\"...\"},\"description\":\"GatewayD plugin for caching query results\",\"authors\":[\"...\"],\"license\":\"AGPL-3.0\",\"projectUrl\":\"https://github.com/gatewayd-io/gatewayd-plugin-cache\",\"config\":{\"apiAddress\":\"localhost:18080\",\"defaultDBName\":\"\",\"exitOnStartupError\":\"False\",\"expiry\":\"1h\",\"metricsEnabled\":\"True\",\"metricsEndpoint\":\"/metrics\",\"metricsUnixDomainSocket\":\"/tmp/gatewayd-plugin-cache.sock\",\"periodicInvalidatorEnabled\":\"True\",\"periodicInvalidatorInterval\":\"1m\",\"periodicInvalidatorStartDelay\":\"1m\",\"redisURL\":\"redis://localhost:6379/0\",\"scanCount\":\"1000\"},\"hooks\":[14,16,18],\"requires\":{},\"tags\":[],\"categories\":[]}]\"\x9c\x01\n" +
	"\x05Group\x12\"\n" +
	"\n" +
	"group_name\x18\x01 \x01(\tH\x00R\tgroupName\x88\x01\x01:`\x92A]\n" +
	"B*\x05Group29Group is the object group to filter the global config by.2\x17{\"groupName\":\"default\"}B\r\n" +
	"\v_group_name\"\xca\x03\n" +
	"\rPeersResponse\x126\n" +
	"\x05peers\x18\x01 \x03(\v2 .api.v1.PeersResponse.PeersEntryR\x05peers\x1aJ\n" +
	"\n" +
	"PeersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.api.v1.PeerInfoR\x05value:\x028\x01:\xb4\x02\x92A\xb0\x02\n" +
	"U*\rPeersResponse2DResponse containing information about all peers in the Raft cluster.2\xd6\x01{\"peers\":{\"node1\":{\"id\":\"node1\",\"address\":\"localhost:8080\",\"state\":\"Leader\",\"is_leader\":true,\"is_voter\":true},\"node2\":{\"id\":\"node2\",\"address\":\"localhost:8081\",\"state\":\"Follower\",\"is_leader\":false,\"is_voter\":true}}}\"\xa8\x02\n" +
	"\bPeerInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x14\n" +
	"\x05state\x18\x03 \x01(\tR\x05state\x12\x1b\n" +
	"\tis_leader\x18\x04 \x01(\bR\bisLeader\x12\x19\n" +
	"\bis_voter\x18\x05 \x01(\bR\aisVoter:\xa3\x01\x92A\x9f\x01\n" +
	"@*\bPeerInfo24Information about a single peer in the Raft cluster.2[{\"id\":\"node1\",\"address\":\"localhost:8080\",\"state\":\"Leader\",\"is_leader\":true,\"is_voter\":true}\"\x98\x02\n" +
	"\x0eAddPeerRequest\x12\x17\n" +
	"\apeer_id\x18\x01 \x01(\tR\x06peerId\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12!\n" +
	"\fgrpc_address\x18\x03 \x01(\tR\vgrpcAddress:\xaf\x01\x92A\xab\x01\n" +
	"Y*\x0eAddPeerRequest2GRequest to add a new peer to the Raft cluster. All fields are required.2N{\"peer_id\":\"node3\",\"address\":\"localhost:8082\",\"grpc_address\":\"localhost:9082\"}\"\xbc\x01\n" +
	"\x0fAddPeerResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error:y\x92Av\n" +
	"W*\x0fAddPeerResponse2DResponse indicating the result of adding a peer to the Raft cluster.2\x1b{\"success\":true,\"error\":\"\"}\"\x8c\x01\n" +
	"\x11RemovePeerRequest\x12\x17\n" +
	"\apeer_id\x18\x01 \x01(\tR\x06peerId:^\x92A[\n" +
	"D*\x11RemovePeerRequest2/Request to remove a peer from the Raft cluster.2\x13{\"peer_id\":\"node3\"}\"\xc7\x01\n" +
	"\x12RemovePeerResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error:\x80\x01\x92A}\n" +
	"^*\x12RemovePeerResponse2HResponse indicating the result of removing a peer from the Raft cluster.2\x1b{\"success\":true,\"error\":\"\"}2\xc2.\n" +
	"\x17GatewayDAdminAPIService\x12\xde\x02\n" +
	"\aVersion\x12\x16.google.protobuf.Empty\x1a\x17.api.v1.VersionResponse\"\xa1\x02\x92A\xf4\x01*\aVersionJ\xe8\x01\n" +
	"\x03200\x12\xe0\x01\n" +
	"<A JSON object is returned in response of the Version method.\x12\x1b\n" +
	"\x19\x1a\x17.api.v1.VersionResponse\"\x82\x01\n" +
	"\x10application/json\x12n{\"version\":\"0.8.5\",\"version_info\":\"GatewayD v0.8.4 (2023-10-29T10:06:37+0000/a776985, go1.21.0, linux/amd64)\"}\x82\xd3\xe4\x93\x02#\x12!/v1/GatewayDPluginService/Version\x12\xa9\n" +
	"\n" +
	"\x0fGetGlobalConfig\x12\r.api.v1.Group\x1a\x17.google.protobuf.Struct\"\xed\t\x92A\xb8\t*\x0fGetGlobalConfigJ\xa4\t\n" +
	"\x03200\x12\x9c\t\n" +
	"DA JSON object is returned in response of the GetGlobalConfig method.\x12\x1b\n" +
	"\x19\x1a\x17.google.protobuf.Struct\"\xb6\b\n" +
	"\x10application/json\x12\xa1\b{\"api\":{\"enabled\":true,\"grpcAddress\":\"localhost:19090\",\"grpcNetwork\":\"tcp\",\"httpAddress\":\"localhost:18080\"},\"clients\":{\"default\":{\"address\":\"localhost:5432\",\"network\":\"tcp\",\"receiveChunkSize\":8192,\"receiveDeadline\":0,\"receiveTimeout\":0,\"sendDeadline\":0,\"tcpKeepAlive\":false,\"tcpKeepAlivePeriod\":30000000000}},\"loggers\":{\"default\":{\"compress\":true,\"consoleTimeFormat\":\"RFC3339\",\"fileName\":\"gatewayd.log\",\"level\":\"info\",\"localTime\":false,\"maxAge\":30,\"maxBackups\":5,\"maxSize\":500,\"noColor\":false,\"output\":[\"console\"],\"rsyslogAddress\":\"localhost:514\",\"rsyslogNetwork\":\"tcp\",\"syslogPriority\":\"info\",\"timeFormat\":\"unix\"}},\"metrics\":{\"default\":{\"address\":\"localhost:9090\",\"certFile\":\"\",\"enabled\":true,\"keyFile\":\"\",\"path\":\"/metrics\",\"readHeaderTimeout\":10000000000,\"timeout\":10000000000}},\"pools\":{\"default\":{\"size\":10}},\"proxies\":{\"default\":{\"healthCheckPeriod\":60000000000}},\"servers\":{\"default\":{\"address\":\"0.0.0.0:15432\",\"certFile\":\"\",\"enableTLS\":false,\"enableTicker\":false,\"handshakeTimeout\":5000000000,\"keyFile\":\"\",\"network\":\"tcp\",\"tickInterval\":5000000000}}}\x82\xd3\xe4\x93\x02+\x12)/v1/GatewayDPluginService/GetGlobalConfig\x12\xad\a\n" +
	"\x0fGetPluginConfig\x12\x16.google.protobuf.Empty\x1a\x17.google.protobuf.Struct\"\xe8\x06\x92A\xb3\x06*\x0fGetPluginConfigJ\x9f\x06\n" +
	"\x03200\x12\x97\x06\n" +
	"DA JSON object is returned in response of the GetPluginConfig method.\x12\x1b\n" +
	"\x19\x1a\x17.google.protobuf.Struct\"\xb1\x05\n" +
	"\x10application/json\x12\x9c\x05{\"enableMetricsMerger\":true,\"healthCheckPeriod\":\"5s\",\"metricsMergerPeriod\":\"5s\",\"plugins\":[{\"args\":[\"--log-level\",\"debug\"],\"checksum\":\"...\",\"enabled\":true,\"env\":[\"MAGIC_COOKIE_KEY=...\",\"MAGIC_COOKIE_VALUE=...\",\"REDIS_URL=redis://localhost:6379/0\",\"EXPIRY=1h\",\"METRICS_ENABLED=True\",\"METRICS_UNIX_DOMAIN_SOCKET=/tmp/gatewayd-plugin-cache.sock\",\"METRICS_PATH=/metrics\",\"PERIODIC_INVALIDATOR_ENABLED=True\",\"PERIODIC_INVALIDATOR_INTERVAL=1m\",\"PERIODIC_INVALIDATOR_START_DELAY=1m\",\"API_ADDRESS=localhost:18080\",\"EXIT_ON_STARTUP_ERROR=False\",\"SENTRY_DSN=...\"],\"localPath\":\"plugins/gatewayd-plugin-cache\",\"name\":\"gatewayd-plugin-cache\"}],\"reloadOnCrash\":true,\"timeout\":\"30s\"}\x82\xd3\xe4\x93\x02+\x12)/v1/GatewayDPluginService/GetPluginConfig\x12\xea\a\n" +
	"\n" +
	"GetPlugins\x12\x16.google.protobuf.Empty\x1a\x15.api.v1.PluginConfigs\"\xac\a\x92A\xfc\x06*\n" +
	"GetPluginsJ\xed\x06\n" +
	"\x03200\x12\xe5\x06\n" +
	"?A JSON object is returned in response of the GetPlugins method.\x12\x19\n" +
	"\x17\x1a\x15.api.v1.PluginConfigs\"\x86\x06\n" +
	"\x10application/json\x12\xf1\x05{\"configs\":[{\"id\":{\"name\":\"gatewayd-plugin-cache\",\"version\":\"0.0.1\",\"remoteUrl\":\"github.com/gatewayd-io/gatewayd-plugin-cache\",\"checksum\":\"...\"},\"description\":\"GatewayD plugin for caching query results\",\"authors\":[\"...\"],\"license\":\"AGPL-3.0\",\"projectUrl\":\"https://github.com/gatewayd-io/gatewayd-plugin-cache\",\"config\":{\"apiAddress\":\"localhost:18080\",\"defaultDBName\":\"\",\"exitOnStartupError\":\"False\",\"expiry\":\"1h\",\"metricsEnabled\":\"True\",\"metricsEndpoint\":\"/metrics\",\"metricsUnixDomainSocket\":\"/tmp/gatewayd-plugin-cache.sock\",\"periodicInvalidatorEnabled\":\"True\",\"periodicInvalidatorInterval\":\"1m\",\"periodicInvalidatorStartDelay\":\"1m\",\"redisURL\":\"redis://localhost:6379/0\",\"scanCount\":\"1000\"},\"hooks\":[14,16,18],\"requires\":{},\"tags\":[],\"categories\":[]}]}\x82\xd3\xe4\x93\x02&\x12$/v1/GatewayDPluginService/GetPlugins\x12\x93\x02\n" +
	"\bGetPools\x12\x16.google.protobuf.Empty\x1a\x17.google.protobuf.Struct\"\xd5\x01\x92A\xa7\x01*\bGetPoolsJ\x9a\x01\n" +
	"\x03200\x12\x92\x01\n" +
	"=A JSON object is returned in response of the GetPools method.\x12\x1b\n" +
	"\x19\x1a\x17.google.protobuf.Struct\"4\n" +
	"\x10application/json\x12 {\"default\":{\"cap\":10,\"size\":10}}\x82\xd3\xe4\x93\x02$\x12\"/v1/GatewayDPluginService/GetPools\x12\xe1\x03\n" +
	"\n" +
	"GetProxies\x12\x16.google.protobuf.Empty\x1a\x17.google.protobuf.Struct\"\xa1\x03\x92A\xf1\x02*\n" +
	"GetProxiesJ\xe2\x02\n" +
	"\x03200\x12\xda\x02\n" +
	"?A JSON object is returned in response of the GetProxies method.\x12\x1b\n" +
	"\x19\x1a\x17.google.protobuf.Struct\"\xf9\x01\n" +
	"\x10application/json\x12\xe4\x01{\"default\":{\"available\":[\"127.0.0.1:50992\",\"127.0.0.1:50956\",\"127.0.0.1:51006\",\"127.0.0.1:50972\",\"127.0.0.1:51002\",\"127.0.0.1:50980\",\"127.0.0.1:50930\",\"127.0.0.1:50946\",\"127.0.0.1:50996\",\"127.0.0.1:51022\"],\"busy\":[],\"total\":10}}\x82\xd3\xe4\x93\x02&\x12$/v1/GatewayDPluginService/GetProxies\x12\xd7\x02\n" +
	"\n" +
	"GetServers\x12\x16.google.protobuf.Empty\x1a\x17.google.protobuf.Struct\"\x97\x02\x92A\xe7\x01*\n" +
	"GetServersJ\xd8\x01\n" +
	"\x03200\x12\xd0\x01\n" +
	"?A JSON object is returned in response of the GetServers method.\x12\x1b\n" +
	"\x19\x1a\x17.google.protobuf.Struct\"p\n" +
	"\x10application/json\x12\\{\"default\":{\"address\":\"0.0.0.0:15432\",\"network\":\"tcp\",\"status\":0,\"tickInterval\":5000000000}}\x82\xd3\xe4\x93\x02&\x12$/v1/GatewayDPluginService/GetServers\x12\xca\x03\n" +
	"\bGetPeers\x12\x16.google.protobuf.Empty\x1a\x17.google.protobuf.Struct\"\x8c\x03\x92A\xf2\x02*\bGetPeersJ\xe5\x02\n" +
	"\x03200\x12\xdd\x02\n" +
	"uA JSON object containing information about all peers in the Raft cluster, including their status and suffrage rights.\x12\x1b\n" +
	"\x19\x1a\x17.google.protobuf.Struct\"\xc6\x01\n" +
	"\x10application/json\x12\xb1\x01{\"node1\":{\"id\":\"node1\",\"address\":\"localhost:8080\",\"status\":\"Leader\",\"suffrage\":\"Voter\"},\"node2\":{\"id\":\"node2\",\"address\":\"localhost:8081\",\"status\":\"Follower\",\"suffrage\":\"Voter\"}}\x82\xd3\xe4\x93\x02\x10\x12\x0e/v1/raft/peers\x12\xc0\x02\n" +
	"\aAddPeer\x12\x16.api.v1.AddPeerRequest\x1a\x17.api.v1.AddPeerResponse\"\x83\x02\x92A\xe6\x01*\aAddPeerJ\xda\x01\n" +
	"\x03200\x12\xd2\x01\n" +
	"\x8c\x01Response indicating success or failure of adding a peer to the Raft cluster. Returns error if peer_id, address, or grpc_address are missing.\x12\x1b\n" +
	"\x19\x1a\x17.api.v1.AddPeerResponse\"$\n" +
	"\x10application/json\x12\x10{\"success\":true}\x82\xd3\xe4\x93\x02\x13:\x01*\"\x0e/v1/raft/peers\x12\xbe\x02\n" +
	"\n" +
	"RemovePeer\x12\x19.api.v1.RemovePeerRequest\x1a\x1a.api.v1.RemovePeerResponse\"\xf8\x01\x92A\xd4\x01*\n" +
	"RemovePeerJ\xc5\x01\n" +
	"\x03200\x12\xbd\x01\n" +
	"uResponse indicating success or failure of removing a peer from the Raft cluster. Returns error if peer_id is missing.\x12\x1e\n" +
	"\x1c\x1a\x1a.api.v1.RemovePeerResponse\"$\n" +
	"\x10application/json\x12\x10{\"success\":true}\x82\xd3\xe4\x93\x02\x1a*\x18/v1/raft/peers/{peer_id}\x1aX\x92AU\x12#GatewayD Administration API Service\x1a.\x12,https://docs.gatewayd.io/using-gatewayd/API/B\x8b\x02\x92A\xdf\x01\x12\xc7\x01\n" +
	"\x12GatewayD Admin API\"E\n" +
	"\bGatewayD\x12'https://github.com/gatewayd-io/gatewayd\x1a\x10info@gatewayd.io*c\n" +
	"&GNU Affero General Public License v3.0\x129https://github.com/gatewayd-io/gatewayd/blob/main/LICENSE2\x051.0.0*\x01\x01:\x10application/jsonZ&github.com/gatewayd-io/gatewayd/api/v1b\x06proto3"

var (
	file_api_v1_api_proto_rawDescOnce sync.Once
	file_api_v1_api_proto_rawDescData []byte
)

func file_api_v1_api_proto_rawDescGZIP() []byte {
	file_api_v1_api_proto_rawDescOnce.Do(func() {
		file_api_v1_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_v1_api_proto_rawDesc), len(file_api_v1_api_proto_rawDesc)))
	})
	return file_api_v1_api_proto_rawDescData
}

var file_api_v1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_api_v1_api_proto_goTypes = []any{
	(*VersionResponse)(nil),    // 0: api.v1.VersionResponse
	(*PluginID)(nil),           // 1: api.v1.PluginID
	(*PluginConfig)(nil),       // 2: api.v1.PluginConfig
	(*PluginConfigs)(nil),      // 3: api.v1.PluginConfigs
	(*Group)(nil),              // 4: api.v1.Group
	(*PeersResponse)(nil),      // 5: api.v1.PeersResponse
	(*PeerInfo)(nil),           // 6: api.v1.PeerInfo
	(*AddPeerRequest)(nil),     // 7: api.v1.AddPeerRequest
	(*AddPeerResponse)(nil),    // 8: api.v1.AddPeerResponse
	(*RemovePeerRequest)(nil),  // 9: api.v1.RemovePeerRequest
	(*RemovePeerResponse)(nil), // 10: api.v1.RemovePeerResponse
	nil,                        // 11: api.v1.PluginConfig.ConfigEntry
	nil,                        // 12: api.v1.PluginConfig.RequiresEntry
	nil,                        // 13: api.v1.PeersResponse.PeersEntry
	(*emptypb.Empty)(nil),      // 14: google.protobuf.Empty
	(*structpb.Struct)(nil),    // 15: google.protobuf.Struct
}
var file_api_v1_api_proto_depIdxs = []int32{
	1,  // 0: api.v1.PluginConfig.id:type_name -> api.v1.PluginID
	11, // 1: api.v1.PluginConfig.config:type_name -> api.v1.PluginConfig.ConfigEntry
	12, // 2: api.v1.PluginConfig.requires:type_name -> api.v1.PluginConfig.RequiresEntry
	2,  // 3: api.v1.PluginConfigs.configs:type_name -> api.v1.PluginConfig
	13, // 4: api.v1.PeersResponse.peers:type_name -> api.v1.PeersResponse.PeersEntry
	6,  // 5: api.v1.PeersResponse.PeersEntry.value:type_name -> api.v1.PeerInfo
	14, // 6: api.v1.GatewayDAdminAPIService.Version:input_type -> google.protobuf.Empty
	4,  // 7: api.v1.GatewayDAdminAPIService.GetGlobalConfig:input_type -> api.v1.Group
	14, // 8: api.v1.GatewayDAdminAPIService.GetPluginConfig:input_type -> google.protobuf.Empty
	14, // 9: api.v1.GatewayDAdminAPIService.GetPlugins:input_type -> google.protobuf.Empty
	14, // 10: api.v1.GatewayDAdminAPIService.GetPools:input_type -> google.protobuf.Empty
	14, // 11: api.v1.GatewayDAdminAPIService.GetProxies:input_type -> google.protobuf.Empty
	14, // 12: api.v1.GatewayDAdminAPIService.GetServers:input_type -> google.protobuf.Empty
	14, // 13: api.v1.GatewayDAdminAPIService.GetPeers:input_type -> google.protobuf.Empty
	7,  // 14: api.v1.GatewayDAdminAPIService.AddPeer:input_type -> api.v1.AddPeerRequest
	9,  // 15: api.v1.GatewayDAdminAPIService.RemovePeer:input_type -> api.v1.RemovePeerRequest
	0,  // 16: api.v1.GatewayDAdminAPIService.Version:output_type -> api.v1.VersionResponse
	15, // 17: api.v1.GatewayDAdminAPIService.GetGlobalConfig:output_type -> google.protobuf.Struct
	15, // 18: api.v1.GatewayDAdminAPIService.GetPluginConfig:output_type -> google.protobuf.Struct
	3,  // 19: api.v1.GatewayDAdminAPIService.GetPlugins:output_type -> api.v1.PluginConfigs
	15, // 20: api.v1.GatewayDAdminAPIService.GetPools:output_type -> google.protobuf.Struct
	15, // 21: api.v1.GatewayDAdminAPIService.GetProxies:output_type -> google.protobuf.Struct
	15, // 22: api.v1.GatewayDAdminAPIService.GetServers:output_type -> google.protobuf.Struct
	15, // 23: api.v1.GatewayDAdminAPIService.GetPeers:output_type -> google.protobuf.Struct
	8,  // 24: api.v1.GatewayDAdminAPIService.AddPeer:output_type -> api.v1.AddPeerResponse
	10, // 25: api.v1.GatewayDAdminAPIService.RemovePeer:output_type -> api.v1.RemovePeerResponse
	16, // [16:26] is the sub-list for method output_type
	6,  // [6:16] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_api_v1_api_proto_init() }
func file_api_v1_api_proto_init() {
	if File_api_v1_api_proto != nil {
		return
	}
	file_api_v1_api_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v1_api_proto_rawDesc), len(file_api_v1_api_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_api_proto_goTypes,
		DependencyIndexes: file_api_v1_api_proto_depIdxs,
		MessageInfos:      file_api_v1_api_proto_msgTypes,
	}.Build()
	File_api_v1_api_proto = out.File
	file_api_v1_api_proto_goTypes = nil
	file_api_v1_api_proto_depIdxs = nil
}
